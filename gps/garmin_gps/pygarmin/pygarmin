#!/usr/bin/env python
"""
   pygarmin

   This is a console user application for communicating with Garmin
   GPS receivers.

   This is released under the Gnu General Public Licence. A copy of
   this can be found at http://www.opensource.org/licenses/gpl-license.html

   For the latest information about PyGarmin, please see
   http://pygarmin.sourceforge.net/

   (c) 2007      Bjorn Tillenius <bjorn.tillenius@gmail.com>
   (c) 2000-2003 James A. H. Skillen <jahs@jahs.net>
   (c) 2001      Raymond Penners <raymond@dotsphinx.com>

"""

import getopt
import logging
import string
import sys
import os

import garmin
import xmlwriter

class Arguments(list):

    def __init__(self, config={}, usage='', description='', example=''):
        self.config = config
        if not self.config.has_key('h'):
            self.config['h'] = ('help', '', 'This page')
        self.appname = os.path.basename(sys.argv[0])
        self.usage = usage % self.appname
        self.description = description
        self.example = example % self.appname
        self.options = {}
        self.maxlength = 0

        shortopts = []
        longopts = []
        for k in self.config.keys():
            option, value, desc = self.config[k]
            shortopts.append(k)
            if value:
                shortopts.append(':')
                longopts.append(option + '=')
            else:
                longopts.append(option)
            n = len(option) + len(value)
            if n > self.maxlength:
                self.maxlength = n

        parsed, leftover = getopt.getopt(sys.argv[1:], ''.join(shortopts),
                                         longopts)
        for option, value in parsed:
            if option.startswith('--'):
                option = option[2:]
            else:
                option = self.config[option[1:]][0]
            self.options[option] = value
        self.extend(leftover)

    def help(self):
        print self.usage
        print self.description
        print self.example
        seq = self.config.keys()
        seq.sort()
        for k in seq:
            option, value, desc = self.config[k]
            n = len(option) + len(value)
            if value:
                print '  -%s, --%s=%s%s%s' % (k, option, value,
                                              (self.maxlength - n + 1) * ' ',
                                              desc)
            else:
                print '  -%s, --%s%s%s' % (k, option,
                                           (self.maxlength - n + 2) * ' ',
                                           desc)

logging_levels = {
    0: logging.NOTSET,
    1: logging.CRITICAL,
    2: logging.ERROR,
    3: logging.WARNING,
    4: logging.INFO,
    5: logging.DEBUG,
    6: garmin.VERBOSE,
    }


def setup_logging(debug_level):
    """Set up logging for the garmin module.

    The higher the debug level, the more output.
    """
    garmin_log = logging.getLogger('pygarmin')
    garmin_log.addHandler(logging.StreamHandler())
    garmin_log.setLevel(logging_levels[debug_level])


class Pygarmin(object):

    def __init__(self):
        self.args = Arguments(
            {'d' : ('debug', 'LEVEL', 'Set debug level, 0-6'),
             'f' : ('format', 'FORMAT',
                    'Output format (pygarmin, xml-abstract, xml-product)')},
            'Usage: %s [OPTIONS] DEVICE [COMMAND] ...',
"""
Communicate with a Garmin GPS connected to DEVICE, where COMMAND is one of:
  info         Show product information
  protocols    Show product communication protocols
  waypoints    Download waypoints from the GPS
  routes       Download routes from the GPS
  tracks       Download tracks from the GPS
The default command is to display the product information.
""",
            'Example: %s /dev/tts/0 waypoints')

        if self.args.options.has_key('help'):
            self.args.help()
            sys.exit(0)

        if len(self.args) == 0:
            self.args.help()
            sys.exit(1)

        if self.args.options.has_key('debug'):
            setup_logging(int(self.args.options['debug']))

    def run(self):
        try:
            self.device(self.args[0])
        except IOError:
            sys.stderr.write(str(sys.exc_info()[1]) + '\n')
            sys.exit(1)

        if len(self.args) == 1:
            self.info()
            sys.exit(0)

        for cmd in self.args:
            available_commands = (
                'info', 'protocols', 'waypoints', 'routes', 'tracks', 'laps',
                'runs')
            if cmd in available_commands:
                getattr(self, cmd)()

    def device(self, arg):
        if arg.lower() == 'usb:':
            link = garmin.USBLink()
        else:
            link = garmin.SerialLink(arg)
        self.gps = garmin.Garmin(link)

### commands

    def info(self):
        print '*** Product Info ***'
        print string.join(self.gps.prod_descs, '\n')
        print 'GPS Product ID: %i' % self.gps.prod_id
        print 'Software version: %2.2f' % self.gps.soft_ver
        print

    def laps(self):
        print '*** Laps ***'
        self.gps.getLaps(print_)

    def runs(self):
        print '*** Runs ***'
        self.gps.getRuns(print_)

    def protocols(self):
        print '*** Product Protocols ***'
        for i in range(len(self.gps.protocols)):
            p = self.gps.protocols[i]
            if p[0] == 'D':
                sys.stdout.write(', '+p)
            else:
                if i == 0:
                    sys.stdout.write(p)
                else:
                    sys.stdout.write('\n'+p)
        print '\n'

        # print unknown protocols

        if len(self.gps.protocols_unknown):
            print
            print "Product protocols who are not supported yet:"
            print "--------------------------------------------"

            for i in range(len(self.gps.protocols_unknown)):
                p = self.gps.protocols_unknown[i]

                if  p[0] == 'D':
                    print p,
                else:
                    if i == 0:
                        print p,
                    else:
                        print
                        print p,

            print
            print

    def waypoints(self):
        fmtmap = {'xml-product': self.waypointsxmlproduct,
                  'xml-abstract': self.waypointsxmlabstract,
                  'pygarmin': self.waypointspygarmin}
        if self.args.options.has_key('format'):
            fmt = self.args.options['format']
            if fmt in fmtmap.keys():
                fmtmap[fmt]()
            else:
                sys.stderr.write("Unknown format: '" + fmt + "'\n")
                sys.exit(1) # XXX use exception
        else:
            self.waypointspygarmin()

    def routes(self):
        print '*** Downloaded Routes ***'
        rs = self.gps.getRoutes(print_)
        print

    def tracks(self):
        print '*** Downloaded Tracks ***'
        ts = self.gps.getTracks(print_)
        print

###

    def waypointspygarmin(self):
        print '*** Downloaded Waypoints ***'
        ws = self.gps.getWaypoints(print_)
        print

    def waypointsxmlproduct(self):
        x = xmlwriter.XmlWriter()
        x.tag('gps', 0, {'class': 'garmin',
                         'id' : self.gps.prod_id,
                         'info': string.join(self.gps.prod_descs),
                         'version': self.gps.soft_ver})
        x.tag('waypoints')
        def cb(w):
            wclass = string.split(str(w.__class__), '.')[-1]
            wname = w.ident
            x.tag('waypoint', 0,
                  { 'class': wclass,
                    'name': wname
                    })
            x.tag('coordinates', 1,
                  { 'latitude' : w.slat,
                    'longitude' : w.slon,
                    'format' : 'semicircle' })
            for attr in w.parts:
                val = eval('w.'+attr)
                if len(str(val)) > 0:
                    x.tag('attribute', 1, { 'name': attr, 'value': val})
            x.tagClose()
        self.gps.getWaypoints(cb)
        x.tagClose()
        x.tagClose()

    def waypointsxmlabstract(self):
        x = xmlwriter.XmlWriter()
        x.tag('gps', 0, {'class': 'abstract'})
        x.tag('waypoints')
        def cb(w):
            wname = w.ident
            x.tag('waypoint', 0, { 'name': wname })
            x.tag('coordinates', 1,
                  { 'latitude' : garmin.degrees(w.slat),
                    'longitude' : garmin.degrees(w.slon)})
            x.tagClose()
        self.gps.getWaypoints(cb)
        x.tagClose()
        x.tagClose()

def print_(x, index, numrecords, pid):
    print x, index, numrecords, pid

def main():
    app = Pygarmin()
    app.run()

if __name__ == '__main__':
    main()
